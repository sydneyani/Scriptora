import React, { useEffect, useState } from 'react';
import { getImageDimensions } from './utils/utils';
export var SpriteImage = function (_a) {
    var columns = _a.columns, fallback = _a.fallback, height = _a.height, position = _a.position, rows = _a.rows, spriteUrl = _a.spriteUrl, width = _a.width;
    var _b = useState([0, 0]), _c = _b[0], spriteWidth = _c[0], spriteHeight = _c[1], setSpriteDimensions = _b[1];
    useEffect(function () {
        getImageDimensions(spriteUrl).then(setSpriteDimensions).catch(console.error);
    }, [spriteUrl]);
    var x = position[0], y = position[1];
    var spriteItemWidth = spriteWidth / columns;
    var spriteItemHeight = spriteHeight / rows;
    var resizeRatio = 1;
    if (!width && height)
        resizeRatio = height / spriteItemHeight;
    if (width && !height)
        resizeRatio = width / spriteItemWidth;
    if (resizeRatio === Infinity)
        resizeRatio = 1;
    if (!spriteHeight || !spriteWidth)
        return React.createElement(React.Fragment, null, fallback);
    return (React.createElement("div", { "data-testid": 'sprite-image', style: {
            backgroundImage: "url('".concat(spriteUrl, "')"),
            backgroundPosition: "".concat(x * (100 / (columns - 1)), "% ").concat(y * (100 / (rows - 1)), "%"),
            backgroundSize: "".concat(columns * 100, "% ").concat(rows * 100, "%"),
            height: height !== null && height !== void 0 ? height : spriteItemHeight * resizeRatio,
            width: width !== null && width !== void 0 ? width : spriteItemWidth * resizeRatio,
        } }));
};
