import { ReactNode } from 'react';
import { MessageProps } from '../Message/types';
import { StreamMessage } from '../../context/ChannelStateContext';
import { DefaultStreamChatGenerics } from '../../types/types';
import { ComponentContextValue, CustomClasses } from '../../context';
import { GroupStyle } from './utils';
import { ChannelState as StreamChannelState, UserResponse } from 'stream-chat';
export interface RenderMessagesOptions<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> {
    components: ComponentContextValue<StreamChatGenerics>;
    lastReceivedMessageId: string | null;
    messageGroupStyles: Record<string, GroupStyle>;
    messages: Array<StreamMessage<StreamChatGenerics>>;
    /**
     * Object mapping message IDs of own messages to the users who read those messages.
     */
    readData: Record<string, Array<UserResponse<StreamChatGenerics>>>;
    /**
     * Props forwarded to the Message component.
     */
    sharedMessageProps: SharedMessageProps<StreamChatGenerics>;
    customClasses?: CustomClasses;
    /**
     * Current user's read status.
     * Useful to determine, when a channel has been marked read the last time, the last read message, count of unread messages.
     */
    ownReadState?: StreamChannelState<StreamChatGenerics>['read'][keyof StreamChannelState<StreamChatGenerics>['read']];
}
export type SharedMessageProps<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = Omit<MessageProps<StreamChatGenerics>, MessagePropsToOmit>;
export type MessageRenderer<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = (options: RenderMessagesOptions<StreamChatGenerics>) => Array<ReactNode>;
type MessagePropsToOmit = 'channel' | 'groupStyles' | 'initialMessage' | 'lastReceivedId' | 'message' | 'readBy';
export declare function defaultRenderMessages<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>({ components, customClasses, lastReceivedMessageId: lastReceivedId, messageGroupStyles, messages, ownReadState, readData, sharedMessageProps: messageProps, }: RenderMessagesOptions<StreamChatGenerics>): JSX.Element[];
export {};
//# sourceMappingURL=renderMessages.d.ts.map